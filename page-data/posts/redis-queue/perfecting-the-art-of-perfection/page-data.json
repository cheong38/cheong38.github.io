{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/redis-queue/perfecting-the-art-of-perfection","result":{"data":{"markdownRemark":{"id":"dd14713a-66e4-5182-a2b6-e1f970a40f8e","html":"<h1 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h1>\n<p>Redis 는 일반적으로 데이터베이스 캐시와 메세지 브로커로 쓰이는 오픈소스로 된 인메모리 데이터 저장소이다.\nRedis 에서는 pub/sub 기능도 제공하는데, <a href=\"https://redis.io/topics/pubsub\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기서</a> 자세한 내용을 찾아볼 수 있다.\nRedis pub/sub 의 주요한 특성 중 하나는 메세지가 구독하는 모든 클라이언트에게 보내진다는 것이다.\n즉, 하나의 publish 에 대해서 여러 클라이언트가 실행될 수 있다는 의미이다.\n혹은 RPOPLPUSH 등을 이용해 <a href=\"https://redis.io/commands/rpoplpush#pattern-reliable-queue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reliable Queue 패턴</a> 을 구현해야 하는데 너무 low-level 디테일을 관여해야 한다.\n본 포스팅에서는 <a href=\"https://www.npmjs.com/package/bull\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Bull</code></a> 을 이용해 Redis 를 메세지 큐로 활용하는 법을 설명한다.</p>\n<h1 id=\"bull\" style=\"position:relative;\"><a href=\"#bull\" aria-label=\"bull permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bull</h1>\n<p><code class=\"language-text\">Bull</code> 은 Redis 기반의 큐를 제공하는 Nodejs 라이브러리이다.\n새 버전인 <a href=\"https://github.com/taskforcesh/bullmq\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">BullMQ4</code></a> 개발 진행 중이지만 아직 베타이고 star 수도 그렇게 높지 않아 본 포스팅에서는 <code class=\"language-text\">Bull</code> 로 진행한다.</p>\n<p><code class=\"language-text\">Bull</code>은 Redis 의 low-level 디테일을 감추고, Delayed jobs, Retries, Priority, Automatic recovery 등과 같은 기능을 제공함으로써 보다 신뢰도 높고 사용하기 편리하게 만들어준다.</p>\n<h1 id=\"실험\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%97%98\" aria-label=\"실험 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실험</h1>\n<p>본 포스팅에서는 두 가지 실험을 진행한다.</p>\n<ol>\n<li>여러 클라이언트가 대기 중일 때, 오직 하나의 job 만 실행되는가</li>\n<li>클라이언트가 나중에 실행되어도 job 이 실행되는가</li>\n</ol>\n<p>실험에 사용된 코드는 <a href=\"https://github.com/cheong38/nest-bull\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a>에서 확인할 수 있다.</p>\n<h2 id=\"사전-준비\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%A0%84-%EC%A4%80%EB%B9%84\" aria-label=\"사전 준비 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사전 준비</h2>\n<ul>\n<li>Nodejs v12.x.x</li>\n<li><a href=\"https://yarnpkg.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yarn</a></li>\n<li><a href=\"https://nestjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nestjs</a></li>\n<li><a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker</a></li>\n</ul>\n<h2 id=\"디렉토리-구조\" style=\"position:relative;\"><a href=\"#%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EA%B5%AC%EC%A1%B0\" aria-label=\"디렉토리 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디렉토리 구조</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── consumer/\n├── nest-producer/\n└── producer/</code></pre></div>\n<h2 id=\"consumer\" style=\"position:relative;\"><a href=\"#consumer\" aria-label=\"consumer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Consumer</h2>\n<p>먼저 AppModule 에 Redis 설정 값을 넣은 <code class=\"language-text\">Bull</code> 모듈을 import 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// consumer/src/app.module.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BullModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/bull'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TestConsumer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./test.consumer'</span>\n\n@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    BullModule<span class=\"token punctuation\">.</span><span class=\"token function\">registerQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span>\n      redis<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        host<span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n        port<span class=\"token operator\">:</span> <span class=\"token number\">6379</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>TestConsumer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">test</code> 라는 이름의 큐에 메세지가 추가되면 <code class=\"language-text\">doJob()</code> 이라는 메서드가 실행되게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// consumer/src/test.consumer.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Process<span class=\"token punctuation\">,</span> Processor <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/bull'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Job <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'bull'</span>\n\n@<span class=\"token function\">Processor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestConsumer</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">doJob</span><span class=\"token punctuation\">(</span>job<span class=\"token operator\">:</span> Job<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consumer'</span><span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"nest-producer\" style=\"position:relative;\"><a href=\"#nest-producer\" aria-label=\"nest producer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nest Producer</h2>\n<p>먼저 AppModule 에 Redis 설정 값을 넣은 <code class=\"language-text\">Bull</code> 모듈을 import 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// nest-producer/src/app.module.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BullModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/bull'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.controller'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    BullModule<span class=\"token punctuation\">.</span><span class=\"token function\">registerQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span>\n      redis<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        host<span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n        port<span class=\"token operator\">:</span> <span class=\"token number\">6379</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">AppController</code> 의 <code class=\"language-text\">getHello()</code> 메서드가 실행되면 <code class=\"language-text\">test</code> 큐에 <code class=\"language-text\">{ data: 1 }</code> 이라는 데이터와 함께 메세지를 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// nest-producer/src/app.controller.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> InjectQueue <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/bull'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller<span class=\"token punctuation\">,</span> Get <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Queue <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'bull'</span>\n\n@<span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>\n    @<span class=\"token function\">InjectQueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> testQueue<span class=\"token operator\">:</span> Queue\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  @<span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>testQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'hello'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"producer-without-nestjs\" style=\"position:relative;\"><a href=\"#producer-without-nestjs\" aria-label=\"producer without nestjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Producer (without nestjs)</h2>\n<p>Nestjs 없이 <code class=\"language-text\">Bull</code> 라이브러러만을 이용해서 <code class=\"language-text\">test</code> 큐에 job 을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// producer/main.js</span>\n<span class=\"token keyword\">const</span> Queue <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bull'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> testQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    redis<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      host<span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n      port<span class=\"token operator\">:</span> <span class=\"token number\">6379</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> testQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"redis-실행-with-docker\" style=\"position:relative;\"><a href=\"#redis-%EC%8B%A4%ED%96%89-with-docker\" aria-label=\"redis 실행 with docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redis 실행 (with Docker)</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ docker run --rm -it -p <span class=\"token number\">6379</span>:6379 --name bull-redis redis</code></pre></div>\n<h2 id=\"여러-클라이언트가-대기-중일-때-오직-하나의-job-만-실행되는가\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EA%B0%80-%EB%8C%80%EA%B8%B0-%EC%A4%91%EC%9D%BC-%EB%95%8C-%EC%98%A4%EC%A7%81-%ED%95%98%EB%82%98%EC%9D%98-job-%EB%A7%8C-%EC%8B%A4%ED%96%89%EB%90%98%EB%8A%94%EA%B0%80\" aria-label=\"여러 클라이언트가 대기 중일 때 오직 하나의 job 만 실행되는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 클라이언트가 대기 중일 때, 오직 하나의 job 만 실행되는가</h2>\n<p>한 터미널에서 아래의 명령어를 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token builtin class-name\">cd</span> consumer\n$ <span class=\"token function\">yarn</span> start:1</code></pre></div>\n<p>다른 터미널에서 아래의 명령어를 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token builtin class-name\">cd</span> consumer\n$ <span class=\"token function\">yarn</span> start:2</code></pre></div>\n<p>이제 두 개의 consumer 가 <code class=\"language-text\">test</code> 큐에 메세지가 들어오면 처리할 수 있도록 대기하고 있다.</p>\n<p>다른 터미널에서 아래의 명령어를 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token builtin class-name\">cd</span> producer\n$ <span class=\"token function\">yarn</span> start</code></pre></div>\n<p>그러면 한 번에 오직 하나의 consumer 에서 log 가 출력되는 것을 확인할 수 있다.\n즉, 메세지 하나 당 오직 하나의 클라이언트만 처리를 진행하게 된다.</p>\n<h2 id=\"클라이언트가-나중에-실행되어도-job-이-실행되는가\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EA%B0%80-%EB%82%98%EC%A4%91%EC%97%90-%EC%8B%A4%ED%96%89%EB%90%98%EC%96%B4%EB%8F%84-job-%EC%9D%B4-%EC%8B%A4%ED%96%89%EB%90%98%EB%8A%94%EA%B0%80\" aria-label=\"클라이언트가 나중에 실행되어도 job 이 실행되는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클라이언트가 나중에 실행되어도 job 이 실행되는가</h2>\n<p>한 터미널에서 아래의 명령어를 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token builtin class-name\">cd</span> producer\n$ <span class=\"token function\">yarn</span> start</code></pre></div>\n<p>그리고 또 다른 터미널에서 아래의 명령어를 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token builtin class-name\">cd</span> consumer\n$ <span class=\"token function\">yarn</span> start:1</code></pre></div>\n<p>큐에 메세지가 먼저 들어가게 되고 나중에 그 메세지를 처리하기 위한 클라이언트가 실행된 경우를 시물레이션 하고 있다.\n이 경우, consumer 가 실행되자마자 log 가 출력되는 것을 확인할 수 있다.\n즉, job processor 가 나중에 실행되어도 처리되지 못한 메세지가 처리될 수 있음을 확인할 수 있다.</p>","fields":{"slug":"/posts/redis-queue/perfecting-the-art-of-perfection","tagSlugs":["/tag/handwriting/","/tag/learning-to-write/"]},"frontmatter":{"date":"2016-09-01T23:46:37.121Z","description":"Quisque cursus, metus vitae pharetra auctor, sem massa mattis sem, at interdum magna augue eget diam. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Morbi lacinia molestie dui. Praesent blandit dolor. Sed non quam. In vel mi sit amet augue congue elementum.","tags":["Handwriting","Learning to write"],"title":"Redis 를 메세지 큐 (Message Queue) 로 사용하기 (feat. Bull)","socialImage":"/media/image-2.jpg"}}},"pageContext":{"slug":"/posts/redis-queue/perfecting-the-art-of-perfection"}},"staticQueryHashes":["251939775","3942705351","401334301"]}